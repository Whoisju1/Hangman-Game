/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__style_main_scss__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__style_main_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__style_main_scss__);\n\n//import styles\n\n\n\nconst HANGMAN = {};\n\n// -------------------------NAMESPACE -------------------------\n(namespace => {\n\t// -----------------------WORD CLASS------------------------\n\t// used to make words for game\n\tclass Word {\n\t\tconstructor(word, hint) {\n\t\t\tthis.word = word.toLowerCase();\n\t\t\tthis.hint = hint;\n\t\t\tthis.isMatched = this.isMatched.bind(this);\n\t\t\tthis.isIncluded = this.isIncluded.bind(this);\n\t\t}\n\n\t\t// method to test if user letter choice is present in word\n\t\tisIncluded(char) {\n\t\t\treturn this.word.includes(char.toLowerCase().trim());\n\t\t}\n\n\t\t//method to test if word is correct\n\t\tisMatched(letters) {\n\t\t\treturn this.word === letters.toLowerCase().trim() ? true : false;\n\t\t}\n\t}\n\n\t// ----------------------WORD FACTORY------------------------\n\t// make single word or an array of words and make it a property of HANGMAN\n\t// it takes an a single string, multiple stings, or an array of stings as an argument\n\tHANGMAN.wordFactory = (...word) => {\n\t\t// if argument is an array make it an array by destructuring it\n\t\tif (Array.isArray(...word)) [word] = word;\n\t\t// iterate through an array of strings and return an array of objects\n\t\tif (word.length > 1) return word.map(item => new Word(...item));\n\n\t\t// if argument is a single string destructure the array and output a string\n\t\tconst [singleWord] = word;\n\t\t// make a single object\n\t\treturn new Word(singleWord);\n\t};\n\n\t// ------------------ARRAY ITERATOR ----------------------------------\n\n\t// loop through array of words and execute callback function using recursive function\n\tconst arrayIterator = (wordList, cb) => {\n\t\tconst [a, ...b] = wordList;\n\t\tcb(a);\n\t\tif (wordList.length === 1) return;\n\t\tarrayIterator(b, cb);\n\t};\n\n\tHANGMAN.arrayIterator = arrayIterator;\n\n\t// This method takes in a string and outputs a string of underscores\n\t// proportionate to the number of characters contained in the string\n\tconst makeDashes = answer => {\n\t\tlet dashed = [];\n\t\t(function looper(answer) {\n\t\t\tlet [a, ...b] = [...answer];\n\n\t\t\tdashed.push('_');\n\t\t\tif (answer.length === 1) return;\n\t\t\tlooper(b);\n\t\t})(answer);\n\t\treturn dashed.join('');\n\t};\n\n\tHANGMAN.makeDashes = makeDashes;\n\n\t// this is a method used for DOM manipulation\n\t// the names of the functions within it borrow from jQuery\n\tconst makeElem = elemName => {\n\t\tlet elem = document.createElement(elemName = 'div');\n\n\t\t// insert element into another element\n\t\telem.appendTo = parent => {\n\t\t\tparent.appendChild(elem);\n\t\t\treturn elem;\n\t\t};\n\n\t\t// add text to element\n\t\telem.text = text => {\n\t\t\telem.textContent = text;\n\t\t\treturn elem;\n\t\t};\n\n\t\t// add HTML to element\n\t\telem.html = html => {\n\t\t\telem.innerHTML = html;\n\t\t\treturn elem;\n\t\t};\n\n\t\t// empty the element of all it's content\n\t\telem.empty = () => {\n\t\t\telem.innerHTML = '';\n\t\t\treturn elem;\n\t\t};\n\n\t\t// hide the element\n\t\telem.hide = () => {\n\t\t\telem.style.visibility = 'hidden';\n\t\t\treturn elem;\n\t\t};\n\n\t\t// show element\n\t\telem.show = () => {\n\t\t\telem.style.visibility = 'visible';\n\t\t\treturn elem;\n\t\t};\n\n\t\t// add CSS class to element\n\t\telem.addClass = className => {\n\t\t\telem.classList.add(className);\n\t\t\treturn elem;\n\t\t};\n\n\t\t// remove CSS class from element\n\t\telem.removeClass = className => {\n\t\t\telem.classList.remove(className);\n\t\t\treturn elem;\n\t\t};\n\n\t\treturn elem;\n\t};\n\n\tHANGMAN.makeElem = makeElem;\n\n\t// window.onresize = (e) => {\n\t// \t// const func = e.getMatchedCSSRules();\n\t// \t// console.log(func);\n\t// \tconsole.log(e);\n\t// };\n\t// this takes in two arguments, the answer and the user's guess\n\t// if the letter guess is present in the answer it outputs an array of objects with the\n\t// letter as a string and the index at which the letter is present in the answer string\n\tlet guesses = (answer, letterGuessed) => {\n\t\treturn (\n\t\t\t// spread the characters in the string and place them in an array\n\t\t\t// then iterate through them using the reduce function which returns a array that contains\n\t\t\t// all the letter guessed and the the index at which it is matched in the answers string\n\t\t\t[...answer].reduce((arr, letter, index) => {\n\t\t\t\tif (letterGuessed === letter) {\n\t\t\t\t\tlet obj = {\n\t\t\t\t\t\tkey: letterGuessed,\n\t\t\t\t\t\tindex: index\n\t\t\t\t\t};\n\t\t\t\t\tarr.push(obj);\n\t\t\t\t}\n\t\t\t\treturn arr;\n\t\t\t}, [])\n\t\t);\n\t};\n\n\tHANGMAN.guesses = guesses;\n\n\t// replaces characters in a string where with provided replacement character and index where it should be placed\n\t// it receives two arguments, a string and an array of objects containing a character the user guessed and it's index in the answer\n\t// all characters provided are contained in the answer\n\tconst replace = (word, input) => {\n\t\tlet resultStr = input.reduce((previous, guess) => {\n\t\t\t// insert each letter according to it's provided index\n\t\t\tif (guess.index !== -1) return previous.substring(0, guess.index) + guess.key + previous.substring(guess.index + 1, previous.length);\n\t\t}, word);\n\n\t\t// return altered string as output\n\t\treturn resultStr;\n\t};\n\n\tHANGMAN.replace = replace;\n\n\t// takes in a number increments it by one and returns the incremented number\n\tconst inc = (num = -1) => num + 1;\n\n\tHANGMAN.inc = inc;\n})(HANGMAN);\n\nconst gameWords = HANGMAN.wordFactory([['boxer', \"It could be a man or a dog.\"], ['compliment', \"Say something to make me smile.\"], ['basketball', 'Nothing but net.'], ['hibernate', 'I can bare the cold.']]);\nconst { makeElem, makeDashes, guesses, replace, inc } = HANGMAN;\nconst methodsArr = [makeElem, makeDashes, guesses, replace, inc];\n\nconst gameConfig = (words, methods) => {\n\n\tconst wrapQuestMark = word => {\n\t\tconst wordArr = [...word].map(letter => {\n\t\t\tif (letter === '_') return `<span class=\"display__content--unsolved\">${letter}</span>`;\n\t\t\treturn letter;\n\t\t});\n\t\treturn wordArr.join('');\n\t};\n\n\tconst [makeElem, makeDashes, guesses, replace, inc] = methods;\n\n\t// create and place elements into DOM when game inintally starts\n\tconst game = makeElem().addClass('game').appendTo(document.body);\n\n\tconst displayHead__score = makeElem().addClass('display__heading').addClass('display__heading--score').appendTo(game);\n\n\tconst displayContent__word = makeElem().addClass('display__content').addClass('display__content--word').appendTo(game);\n\n\tconst wrongGuessesDiv = makeElem().addClass('wrong-guesses').appendTo(game);\n\n\tconst displayHead__hint = makeElem().addClass('game__hint-head').addClass('display__heading').addClass('display__heading--hint').appendTo(game).text('Hint');\n\n\tconst displayContent__hint = makeElem().addClass('display__content').addClass('display__content--hint').html(`\n\t\t\t<p class=\"game-text hint-text\">${words[0].hint}</p>\n\t\t`).appendTo(game);\n\n\tconst body = document.body;\n\n\t// set initial values for game\n\n\tlet input = [];\n\n\t// this sets the count to zero\n\t// the inc function returns zero when it is passed no arguments\n\t// otherwise it takes a number as an argument and turns that number incremented by 1\n\t// inc(5) is 5 + 1, which returns 6.\n\n\tlet count = inc();\n\n\tlet { word } = words[count];\n\n\tlet wins = 0;\n\n\tlet chances = 5;\n\n\tlet guessedLetters = [];\n\n\tlet puzzleWord = makeDashes(word);\n\n\t// ############ SETTING INITIAL DOM ELEMENTS ###############\n\tlet winsDiv = makeElem().addClass('game__score--wins').html(`wins: <span class=\"game__score--tally\">${wins}</span>`).appendTo(displayHead__score);\n\tlet chancesDiv = makeElem().addClass('game__score--chances').html(`chances: <span class=\"game__score--tally\">${chances}</span>`).appendTo(displayHead__score);\n\n\tlet wordProgressDiv = makeElem().addClass('game-text').addClass('display__content--text').html(wrapQuestMark(puzzleWord)).appendTo(displayContent__word);\n\n\tconst modalBackdrop = makeElem().addClass('modal__backdrop').hide().appendTo(body);\n\tconst modal = makeElem().addClass('modal').appendTo(modalBackdrop);\n\n\tconst modalMessage = makeElem().addClass('modal--message').appendTo(modal);\n\n\tlet canIncScores = true;\n\tlet acknowledgeGuesses = true;\n\n\tconst softReset = () => {\n\t\tguessedLetters = [];\n\t\tcount = inc(count);\n\t\tword = words[count].word;\n\t\tpuzzleWord = makeDashes(word);\n\t\tinput = [];\n\t\tchances = 5;\n\t\twordProgressDiv.text(`Word so far: ${puzzleWord}`);\n\t\t// print hint to screen\n\t\tdisplayContent__hint.html(`<p class=\"game-text hint-text\">${words[count].hint}</p>`).addClass('display__content');\n\n\t\twrongGuessesDiv.empty();\n\t};\n\n\t// RESTARTS GAME -- STARTS FROM THE BEGINNING\n\tconst hardReset = () => {\n\t\tguessedLetters = [];\n\t\tcanIncScores = true;\n\t\tcount = inc();\n\t\tword = words[count].word;\n\t\tpuzzleWord = makeDashes(word);\n\t\tinput = [];\n\t\tchances = 5;\n\t\twins = 0;\n\t\twordProgressDiv.html(wrapQuestMark(puzzleWord));\n\t\t// print hint to screen\n\t\tdisplayContent__hint.html(`\n\t\t\t<p class=\"game-text hint-text\">${words[count].hint}</p>\n\t\t`);\n\t\twrongGuessesDiv.empty();\n\t};\n\n\t// COMMENCE GAME WHEN USER PRESSES THE ENTER KEY\n\tbody.onkeyup = e => {\n\t\tconst isAlphabet = str => /^[a-zA-Z()]$/.test(str);\n\n\t\t// capture key stroke\n\t\tlet { key, ctrlKey } = e;\n\n\t\t// if key is a letter turn it to lower case and reassign it to back to key\n\t\tif (isAlphabet(key)) key = key.toLowerCase();\n\n\t\t// only preceed if CTRL isn't pressed along with alphabet key\n\t\tif (ctrlKey) return;\n\n\t\t//\n\t\tlet userGuess = guesses(word, key);\n\n\t\t// this function tests the key entered to find out if it is an alphabetical character\n\t\tconst alphabetTestPast = isAlphabet(key);\n\n\t\t// spread array and push them into the input array\n\t\tif (acknowledgeGuesses) input.push(...userGuess);\n\n\t\tpuzzleWord = replace(puzzleWord, input);\n\n\t\t// ############## USER GUESSED WRONG #############\n\t\tif (!words[count].isIncluded(key) && canIncScores === true && chances >= 1 && alphabetTestPast && !guessedLetters.includes(key)) {\n\t\t\tchances--;\n\t\t\tguessedLetters.push(key);\n\t\t\tmakeElem().addClass('wrong-letter').text(key).appendTo(wrongGuessesDiv);\n\n\t\t\twrongGuessesDiv.addClass('wiggle-animation');\n\n\t\t\tsetTimeout(() => {\n\t\t\t\twrongGuessesDiv.removeClass('wiggle-animation');\n\t\t\t}, 1000);\n\t\t}\n\n\t\t// ########## USER EXHAUSTS ALL HIS GUESSES ##############\n\t\tif (!chances) {\n\t\t\tacknowledgeGuesses = false;\n\t\t\t// alert('You lost!');\n\t\t\t// count = inc();\n\t\t\tmodalMessage.html(`<span class=\"modal__heading--loss\">You lose!</span> \n            <br> \n            The word was <span class=\"modal__notable--loss\">\"${words[count].word}\"</span>\n            <br>\n            Press <span class=\"modal__notable--loss\">\"Enter\"</span> to start over.`);\n\t\t\tmodalBackdrop.show();\n\t\t\tif (key === 'Enter') {\n\t\t\t\tcount = inc();\n\t\t\t\twins = inc();\n\t\t\t\tmodalBackdrop.hide();\n\t\t\t\twrongGuessesDiv.empty();\n\t\t\t\tacknowledgeGuesses = true;\n\t\t\t\tword = words[count].word;\n\t\t\t\tpuzzleWord = makeDashes(word);\n\t\t\t\tinput = [];\n\t\t\t\tchances = 5;\n\t\t\t\twordProgressDiv.html(wrapQuestMark(puzzleWord));\n\t\t\t\t// print hint to screen\n\t\t\t\tdisplayContent__hint.html(`\n\t\t\t\t\t<p class=\"game-text hint-text\">${words[count].hint}</p>\n\t\t\t\t`);\n\t\t\t\twinsDiv.html(`wins: <span class=\"game__score--tally\">${wins}</span>`);\n\t\t\t}\n\t\t}\n\n\t\t// print hint to screen\n\t\tdisplayContent__hint.html(`\n\t\t\t<p class=\"game-text hint-text\">${words[count].hint}</p>\n\t\t`);\n\n\t\t// ################ USER GOT ALL THE LETTERS ###############\n\t\tif (words[count].isMatched(puzzleWord)) {\n\t\t\tif (canIncScores) wins++;\n\t\t\tcanIncScores = false;\n\t\t\twinsDiv.html(`wins: <span class=\"game__score--tally\">${wins}</span>`);\n\t\t\twordProgressDiv.text(`Word so far: ${puzzleWord}`);\n\t\t\t// print hint to screen\n\t\t\tdisplayContent__hint.html(`\n\t\t\t\t<p class=\"game-text hint-text\">${words[count].hint}</p>\n\t\t\t`);\n\t\t\t// modalWordDisplay.text(puzzleWord);\n\t\t\tmodalMessage.html(`<h2 class=\"modal__heading--win\">Congratulations!</h2> \n                \n                <p class=\"modal__notable\">You're correct. The word's <span class=\"modal__notable--win\">\"${puzzleWord}\"</span>\n                Press <span class=\"modal__notable--win\">\"Enter\"</span> to attempt the next word.</p>`);\n\t\t\tmodalBackdrop.show();\n\n\t\t\t//  player completed every word -----TODO-----\n\t\t\tif (wins === words.length) {\n\t\t\t\tmodalMessage.html(`\n                    <h1 class=\"modal__heading--win\">Congratulations</h1>\n                    <p class=\"modal--message\">You've found all the words. Press Enter to over</p>\n                 `);\n\t\t\t}\n\n\t\t\t// move to next word when the user presses enter\n\t\t\tif (key === 'Enter') {\n\t\t\t\tcanIncScores = true;\n\t\t\t\t// ###### USER GOT ALL THE WORDS ########\n\t\t\t\tif (words[count] !== words[words.length - 1]) {\n\t\t\t\t\t//  to next word and reset negative record regarding eat individual word\n\t\t\t\t\tsoftReset();\n\t\t\t\t\tmodalBackdrop.hide();\n\t\t\t\t} else {\n\t\t\t\t\t// the game resets when all the words have been solved\n\t\t\t\t\thardReset();\n\t\t\t\t\tmodalBackdrop.hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tchancesDiv.html(`chances: <span class=\"game__score--tally\">${chances}</span>`);\n\t\twinsDiv.html(`wins: <span class=\"game__score--tally\">${wins}</span>`);\n\t\twordProgressDiv.html(wrapQuestMark(puzzleWord));\n\t};\n};\n\n// =================== EVENT HANDLER FOR STARTING GAME=======================\nconst handleKeypress = e => {\n\tconst { key, target } = e;\n\n\tconst intro = document.querySelector('.intro');\n\n\tif (key === 'Enter') {\n\t\tgameConfig(gameWords, methodsArr);\n\t\tintro.parentElement.removeChild(intro);\n\n\t\t// remove listener so that this function is only run once, when the user initially comes to the site\n\t\ttarget.removeEventListener('keypress', handleKeypress);\n\t\ttarget.removeEventListener('click', handleKeypress);\n\t}\n};\n\nfunction handleClick(e) {\n\tconst { target } = e;\n\n\tconst intro = document.querySelector('.intro');\n\n\tintro.parentElement.removeChild(intro);\n\tgameConfig(gameWords, methodsArr);\n\n\ttarget.removeEventListener('click', handleClick);\n\tdocument.body.removeEventListener('keypress', handleKeypress);\n}\n\ndocument.body.addEventListener('keypress', handleKeypress);\nconst introText = document.querySelector('.intro--text');\nintroText.onclick = handleClick;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHlsZS9tYWluLnNjc3M/NDYwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3N0eWxlL21haW4uc2Nzc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);